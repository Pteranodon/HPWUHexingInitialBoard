
@using HPWUHexingTrainer.Classes

<div class="resultsarea ">
    @if (lobbyResult != null)
        @resultTemplate(lobbyResult)
</div>

<div> <button class="btn btn-outline-primary  mt-1" hidden=@(lobbyResult != null && !lobbyResult.Advanced) @onclick="ShowDecisions">Show Decisions</button></div>
@*<div class="resultsarea decisionsarea mt-1" hidden="@hideDecisions">*@
<div class="resultsarea decisionsarea mt-1" hidden="@hideDecisions">
    @if (lobbyResult != null)
        @decisionsTemplate(lobbyResult)
</div>

@code {
    public LobbyResult lobbyResult;
    bool hideDecisions = true;

    //public bool HideResult = true;

    /// <summary>
    /// This is called from the parent component to repaint and from here after loading a lobby
    /// </summary>
    public void Refresh()
    {
        StateHasChanged();

        if (lobbyResult != null && !lobbyResult.Advanced)
            hideDecisions = true;

        //if (lobbyResult != null)
        //    hideDecisions = !lobbyResult.Advanced;  // only show for Advanced
    }

    private void ShowDecisions()
    {
        hideDecisions = !hideDecisions;
    }


    #region resultTemplate
    RenderFragment<LobbyResult> resultTemplate = (result) =>
    @<div>
        @*<b>Magi</b> <br />
            <div>
                @(result.MagiFights ? $"Fights : { result.MagiFoe }" : "Waits")
            </div>*@

        <b>Magi</b> - @(result.MagiFights ? $"Fights : { result.MagiFoe }" : "Waits")<br />
        @*<div>
                @(result.MagiFights ? $"Fights : { result.MagiFoe }" : "Waits")
            </div>*@

        <br />



        <b>A1</b> - @(result.A1Fights ? $"Fights : { result.A1Foe }" : "Waits")<br />
        <div>
            @(result.Advanced ? $"Passes : { result.A1FocusPassedToP1 } to P1 and {result.A1FocusPassedToP2} to P2 - Keeps :  {result.A1FocusKept}"
                            : $"Passes : { result.A1FocusPassed } to P2 - Keeps :  {result.A1FocusKept}" )
        </div>

        @foreach (Hex h in @result.A1Hexes)
        {
            <div> Hexes: @(result.Advanced ? $"{ h.FoeNameWithHexes}" : $"{ h.FoeName} with {h.HexType.ToString()}") </div>
        }
        @*@foreach (Hex h in @result.A1Hexes)
            {
                <div> Hexes: @h.FoeNameWithHexes </div>
            }*@
        @*@foreach (Hex h in @result.A1Hexes)
            {
                <div> Hexes: @h.FoeName with @h.HexType.ToString() </div>
            }*@
        @*<div>
                @(result.A1Fights ? $"Fights : { result.A1Foe }" : "Waits")
            </div>*@

        <br />
        <b>A2</b> - @(result.A2Fights ? $"Fights : { result.A2Foe }" : "Waits")<br />
        <div>
            @(result.Advanced ? $"Passes : { result.A2FocusPassedToP1 } to P1 and {result.A2FocusPassedToP2} to P2 - Keeps :  {result.A2FocusKept}"
                            : $"Passes : { result.A2FocusPassed } to P2 - Keeps :  {result.A2FocusKept}" )
        </div>
        @foreach (Hex h in @result.A2Hexes)
        {
            <div> Hexes: @(result.Advanced ? $"{ h.FoeNameWithHexes}" : $"{ h.FoeName} with {h.HexType.ToString()}") </div>
        }

        @*@foreach (Hex h in @result.A2Hexes)
            {
                <div> Hexes: @h.FoeNameWithHexes </div>
            }*@

        @*@foreach (Hex h in @result.A2Hexes)
            {
                <div> Hexes: @h.FoeName with @h.HexType.ToString() </div>
            }*@

        @*<div>
                @(result.A2Fights ? $"Fights : { result.A2Foe }" : "Waits")
            </div>*@

        <br />
        <b>P1</b>
        @(result.Advanced ? $"(Focus received : { result.A1FocusPassedToP1 + result.A2FocusPassedToP1 })" : "")
        <br />

        <div>
            Shields A1
            @(result.Advanced && result.P1ShieldsA2 ? " and A2" : "")
            @*@(result.Advanced && result.P1ShieldsP2 ? " and P2!" : "")*@


            @if (result.Advanced && result.P1ShieldsP2)
            {
                <b> and P2!</b>
            }
        </div>


        @*<div>Shields A1</div>
            @if (result.Advanced && result.P1ShieldsA2)
            {
                <div>Shields A2</div>
            }

            @if (result.Advanced && result.P1ShieldsP2)
            {
                <div><b>P1 Shields P2!</b></div>
            }*@

        <div>
            @(result.P1Fights ? $"Fights : { result.P1Foe }" : "Waits")
        </div>
        <br />


        <b>P2</b>
        @(result.Advanced ? $"(Focus received : { result.A1FocusPassedToP2 + result.A2FocusPassedToP2 })" : "")
        <br />

        @if (@result.P2ShieldsA2)
        {
            <div>Shields A2</div>
        }
        <div>
            @(result.Proficiency ? "Casts Proficiency" : "No proficiency")
        </div>
        <div>
            @(result.P2Fights ? $"Fights : { result.P2Foe }" : "Waits")
        </div>
        <br />
        <div>Total focus passed: @(result.A1FocusPassed + result.A2FocusPassed) </div>
    </div>;
#endregion


RenderFragment<LobbyResult> decisionsTemplate = (result) =>
@<div>
    @foreach (String decision in @result.Decisions)
    {
        <div>@($"{ decision }")</div>
    }
</div>;



}




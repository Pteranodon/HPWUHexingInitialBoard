
@using HPWUHexingTrainer.Classes

@*<div class="d-none d-xl-block" style="background: #007bff; color: #fff; padding: 5px; text-align: center;">XL</div>
    <div class="d-none d-lg-block d-xl-none" style="background: #27a745; color: #fff; padding: 5px; text-align: center;">LG</div>
    <div class="d-none d-md-block d-lg-none" style="background: #ffc108; color: #fff; padding: 5px; text-align: center;">MD</div>
    <div class="d-none d-sm-block d-md-none" style="background: #18a2b8; color: #fff; padding: 5px; text-align: center;">SM</div>
    <div class="d-block d-sm-none" style="background: #dc3545; color: #fff; padding: 5px; text-align: center;">XS</div>*@

<div class="row">
    <div class="col-lg-5 col-xl-3">
        <div class="div-height">
            <table class="table">
                <thead>
                    <tr>
                        <th>Foes</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @foreach (var foe in Foes)
                            {<div>
                                    <span style="background-color: @(@foe.Elite ? "plum" : "white")">
                                        @_state.FoeFullName(foe)
                                    </span>
                                </div>
                            }
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="col-lg-7 col-xl-3" style="min-width: 350px">

        <div id="backgroundImg" class="div-height" style="background-image: url(@ImgSrc)" hidden="@HideImage">

            @if (ImgSrc == "images/blankboard.png")
            {
                <div class="parent">
                    @for (int cnt = 0; cnt < @Foes.Count; cnt++)
                    {
                        Foe f = Foes[cnt];
                        <div style="grid-area: @f.GridArea;">
                            <img class="foeImg" src="@f.ImagePath">
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    <div class="col-xs col-sm pt-md-0 pt-2 col-md col-lg-12 col-xl">
        <div class="div-height">
            <button class="btn btn-outline-primary mt-1 mb-1" @onclick="GetAnswer" hidden="@_hideAnswerButton">Get Answer</button>

            <label class="font-weight-bold float-right" hidden="@_hideTimerElement">Time: @_timeElapsed secs</label>

            <label class="pl-1" for="chkProficiency" hidden="@_hideProfiencyElements">Have proficiency?</label>

            <input id="chkProficiency" type="checkbox" @bind="_userProficiencyAnswer" hidden="@_hideProfiencyElements" />

            <label class="font-weight-bold" hidden="@_hideProficiencyAnswer">@_proficiencyAnswer</label>


            <button class="btn btn-outline-primary m-1" @onclick="ChangeAnswerRules" hidden="@_hideRuleTypeButton">
                Show @(_state.ShowAdvancedRules ? "Standard" : "Advanced")
            </button>
            <div class="resultsarea" hidden="@_hideResultElement">
                @if (lr != null && (!@_hideResultElement))
                    @resultTemplate(lr)
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public UserSettings _state { get; set; }


    private bool _hideResultElement = true;         // hide initially until answer button clicked.
    private bool _hideAnswerButton = true;          // hide initially until board is generated.
    private bool _hideTimerElement = true;          // hide initially until board is generated.
    private bool _hideProfiencyElements = true;     // initially we want these hidden until board generated.
    private bool _hideRuleTypeButton = true;        // this is hidden until after the results are displayed.

    public List<Foe> Foes = new List<Foe>();
    private bool _hideProficiency = true;
    private bool _hideProficiencyAnswer = true;

    private string _proficiencyAnswer = "";
    private bool _userProficiencyAnswer = false;


    public bool HideImage = true;
    public string ImgSrc;
    public string ImgName;

    private string _timeElapsed = "0.0";
    Stopwatch myWatch = new Stopwatch();

    LobbyResult lr = new LobbyResult();



    public void Clear()
    {
        Foes.Clear();
        _hideResultElement = true;  // hide until answer button clicked again.
        _hideAnswerButton = true;   // hide until board is generated again in Refresh method.
        _hideTimerElement = true;
        _timeElapsed = "0.0";
        _hideProfiencyElements = true;   // hide until board is generated again in Refresh method.
        _hideRuleTypeButton = true;

        _hideProficiencyAnswer = true;
        _proficiencyAnswer = "";
        _userProficiencyAnswer = false;
        HideImage = true;
    }


    /// <summary>
    /// This is called from the parent component when they've loaded a board
    /// </summary>
    public void LoadLobby()
    {
        LoadFoes();

        _hideAnswerButton = false;                          // we have a board so show the Answer button
        _hideTimerElement = !_state.ShowTimer;              // Hide Timer -> setting show timer = false
        _hideProfiencyElements = !_state.ShowProficiency;   // Hide Proficency -> setting show proficiency = false

        _hideResultElement = true;
        _hideProficiencyAnswer = true;
        _timeElapsed = "0.0";
        myWatch.Start();
        Refresh();
    }


    private void LoadFoes()
    {
        Random rnd = new Random();
        for (int cnt = 0; cnt < Foes.Count; cnt++)
        {

            Foe f = Foes[cnt];
            bool uniquePos = false;
            int rndRow = 1;
            int rndCol = 1;

            while (!uniquePos)
            {
                rndRow = rnd.Next(2, 7);
                rndCol = rnd.Next(1, 4);

                // if we don't already have a foe in this position, use it
                if (Foes.Count(f => f.Col == rndCol && f.Row == rndRow) == 0)
                {
                    f.Col = rndCol;
                    f.Row = rndRow;
                    uniquePos = true;
                }
            }
            f.GridArea = $" {rndRow} / {rndCol} / {rndRow + 1} / {rndCol + 1} ";
        }
    }


    /// <summary>
    /// This is called from the parent component to repaint and from here after loading a lobby
    /// </summary>
    public void Refresh()
    {
        StateHasChanged();
    }


    /// <summary>
    /// This is called when the Answer button was clicked
    /// </summary>
    private void GetAnswer()
    {
        lr = LobbyReader.Read(Foes, _state);

        _hideResultElement = !_state.ShowResults;           // Hide Result -> setting show full results = false
        _hideAnswerButton = true;                           // They've clicked the Answer button, hide it until they generate a new board
        _hideProficiencyAnswer = _hideProfiencyElements;    // We're at the results stage, show the proficiency answer if we're showing the proficiency elements

        _proficiencyAnswer = lr.Proficiency == _userProficiencyAnswer ? "Correct!" : "Try Again";

        myWatch.Stop();
        _timeElapsed = myWatch.GetElapsedTimeSecs().ToString();

        _hideRuleTypeButton = false; // now that the answer has been displayed, offer the other rule type
    }

    private void ChangeAnswerRules()
    {
        _state.ShowAdvancedRules = !_state.ShowAdvancedRules;
        lr = LobbyReader.Read(Foes, _state);

    }


    #region resultTemplate
    RenderFragment<LobbyResult> resultTemplate = (result) =>
    @<p>
    <h5>@(result.Advanced ? "Advanced" : "Standard") Answer</h5>
    <b>Magi</b> <br />
    <div>
        @(result.MagiFights ? $"Fights : { result.MagiFoe }" : "Waits")
    </div>

    <br />
    <b>A1</b><br />
    <div>
        @(result.Advanced ? $"Passes : { result.A1FocusPassedToP1 } to P1 and {result.A1FocusPassedToP2} to P2 - Keeps :  {result.A1FocusKept}"
                    : $"Passes : { result.A1FocusPassed } to P2 - Keeps :  {result.A1FocusKept}" )
    </div>

    @foreach (Hex h in @result.A1Hexes)
    {
        <div> Hexes: @h.FoeName with @h.HexType.ToString() </div>
    }
    <div>
        @(result.A1Fights ? $"Fights : { result.A1Foe }" : "Waits")
    </div>

    <br />
    <b>A2</b>  <br />
    <div>
        @(result.Advanced ? $"Passes : { result.A2FocusPassedToP1 } to P1 and {result.A2FocusPassedToP2} to P2 - Keeps :  {result.A2FocusKept}"
                    : $"Passes : { result.A2FocusPassed } to P2 - Keeps :  {result.A2FocusKept}" )
    </div>

    @foreach (Hex h in @result.A2Hexes)
    {
        <div> Hexes: @h.FoeName with @h.HexType.ToString() </div>
    }

    <div>
        @(result.A2Fights ? $"Fights : { result.A2Foe }" : "Waits")
    </div>

    <br />
    <b>P1</b>
    @(result.Advanced ? $"(Focus received : { result.A1FocusPassedToP1 + result.A2FocusPassedToP1 })" : "")
    <br />
    <div>Shields A1</div>
    @if (result.Advanced && result.P1ShieldsA2)
    {
        <div>Shields A2</div>
    }

    @if (result.Advanced && result.P1ShieldsP2)
    {
        <div><b>P1 Shields P2!</b></div>
    }

    <div>
        @(result.P1Fights ? $"Fights : { result.P1Foe }" : "Waits")
    </div>
    <br />


    <b>P2</b>
    @(result.Advanced ? $"(Focus received : { result.A1FocusPassedToP2 + result.A2FocusPassedToP2 })" : "")
    <br />

    @if (@result.P2ShieldsA2)
    {
        <div>Shields A2</div>
    }
    <div>
        @(result.Proficiency ? "Casts Proficiency" : "No proficiency")
    </div>
    <div>
        @(result.P2Fights ? $"Fights : { result.P2Foe }" : "Waits")
    </div>
    <br />
    <div>Total focus passed: @(result.A1FocusPassed + result.A2FocusPassed) </div>
</p>;
    #endregion

}




@inject Blazored.LocalStorage.ILocalStorageService localStore

<div class="d-none d-xl-block" style="background: #007bff; color: #fff; padding: 5px; text-align: center;">XL</div>
<div class="d-none d-lg-block d-xl-none" style="background: #27a745; color: #fff; padding: 5px; text-align: center;">LG</div>
<div class="d-none d-md-block d-lg-none" style="background: #ffc108; color: #fff; padding: 5px; text-align: center;">MD</div>
<div class="d-none d-sm-block d-md-none" style="background: #18a2b8; color: #fff; padding: 5px; text-align: center;">SM</div>
<div class="d-block d-sm-none" style="background: #dc3545; color: #fff; padding: 5px; text-align: center;">XS</div>

<div class="row">
    <div class="col-lg-5 col-xl-3">
        <div class="div-height">
            <table class="table">
                <thead>
                    <tr>
                        <th>Foes</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @foreach (var foe in Foes)
                            {<div>
                                    <span style="background-color: @(@foe.Elite ? "plum" : "white")">
                                        @foe.ToString()
                                    </span>
                                </div>
                            }
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="col-lg-7 col-xl-3">
        <div class="div-height" style="background-image: url(@ImgSrc)" hidden="@HideImage">

            @if (ImgSrc == "images/blankboard.png")
            {
                <div class="parent">
                    @for (int cnt = 0; cnt < @Foes.Count; cnt++)
                    {
                        Foe f = Foes[cnt];
                        <div style="grid-area: @f.GridArea;">
                            <img class="foeImg" src="@f.ImagePath">
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    <div class="col-xs col-sm pt-md-0 pt-2 col-md col-lg-12 col-xl">
        <div class="div-height">
            <button class="btn btn-outline-primary" @onclick="GetAnswer" hidden="@_hideAnswerButton">Get Answer</button>

            <label class="font-weight-bold float-right" hidden="@_hideTimer">Time: @_timeElapsed seconds</label>
            <label class="pl-1" for="chkProficiency" hidden="@_hideProfiencyFields">Do we have proficiency?</label>
            <input id="chkProficiency" type="checkbox" @bind="_userProficiencyAnswer" hidden="@_hideProfiencyFields" />
            <label class="font-weight-bold" hidden="@_hideProficiencyAnswer">@_proficiencyAnswer</label>

            <pre id="TextAreaResults" class="resultsarea" hidden="@_hideResult">@_result</pre>

        </div>
    </div>
</div>



@code {
    public List<Foe> Foes = new List<Foe>();
    private string _result;
    private bool _hideAnswerButton = true;
    private bool _hideResult = true;
    private bool _hideResultSetting = false; // this is from the settings/local storage
    private bool _hideProficiency = true;
    private bool _hideProficiencyAnswer = true;
    bool _hideTimer = true;

    private string _proficiencyAnswer = "";
    private bool _userProficiencyAnswer = false;
    private bool _hideProfiencyFields;


    // used for test lobbies
    public bool HideImage = true;
    public string ImgSrc;
    public string ImgName;


    private string _timeElapsed = "0.0";
    Stopwatch myWatch = new Stopwatch();


    protected override async Task OnInitializedAsync()
    {
        string showTimer = await localStore.GetItemAsync<string>("ShowTimer");

        if (string.IsNullOrEmpty(showTimer))
            showTimer = "Yes"; // default if we can't find a saved value

        _hideTimer = showTimer == "Yes" ? false : true;


        string showProf = await localStore.GetItemAsync<string>("ShowProficiency");

        if (string.IsNullOrEmpty(showProf))
            showProf = "Yes"; // default if we can't find a saved value

        _hideProficiency = showProf == "Yes" ? false : true;
        _hideProfiencyFields = _hideProficiency || _hideAnswerButton;


        string showResults = await localStore.GetItemAsync<string>("ShowResults");

        if (string.IsNullOrEmpty(showResults))
            showResults = "Yes"; // default if we can't find a saved value

        _hideResultSetting = showResults == "Yes" ? false : true;
        _hideResult = _hideResultSetting || _hideAnswerButton;
    }


    public void Clear()
    {
        Foes.Clear();
        _result = "";
        _hideAnswerButton = true;
        _hideResult = true;
        _hideProficiencyAnswer = true;
        _proficiencyAnswer = "";
        _userProficiencyAnswer = false;
        HideImage = true;
        _timeElapsed = "0.0";
    }


    private void GetAnswer()
    {
        LobbyResult lr = LobbyReader.Read(Foes);

        _proficiencyAnswer = lr.Proficiency == _userProficiencyAnswer ? "Correct!" : "Try Again";
        _result = lr.ToString();


        _hideAnswerButton = true;
        _hideResult = _hideResultSetting;
        _hideProficiencyAnswer = _hideProficiency;

        myWatch.Stop();
        _timeElapsed = myWatch.GetElapsedTimeSecs().ToString();
    }

    public void Refresh()
    {
        Random rnd = new Random();

        for (int cnt = 0; cnt < Foes.Count; cnt++)
        {

            Foe f = Foes[cnt];
            bool uniquePos = false;
            int rndRow = 1;
            int rndCol = 1;

            while (!uniquePos)
            {
                rndRow = rnd.Next(2, 7);
                rndCol = rnd.Next(1, 4);

                // if we don't already have a foe in this position, use it
                if (Foes.Count(f => f.Col == rndCol && f.Row == rndRow) == 0)
                {
                    f.Col = rndCol;
                    f.Row = rndRow;
                    uniquePos = true;
                }
            }
            f.GridArea = $" {rndRow} / {rndCol} / {rndRow + 1} / {rndCol + 1} ";
        }

        _hideAnswerButton = false;

        _hideResult = true;
        _hideProficiencyAnswer = true;

        _hideProfiencyFields = _hideProficiency || _hideAnswerButton;

        myWatch.Start();
        StateHasChanged();
    }
}

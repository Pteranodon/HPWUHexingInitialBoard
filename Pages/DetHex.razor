@page "/dethex"

<h3>Can you order the det hex priority?</h3>

<div class="row pt-2">
    <div class="col-12">
        <button class="btn btn-outline-primary" @onclick="GetNewLobby">Generate New Lobby</button>
    </div>
    <div>
        <ul ondragover="event.preventDefault();" style="margin:20px">
            @foreach (var item in _foeDetHex)
            {
                if (item != null)
                {
                    <li draggable="true" style="list-style-type:none; height:90px" @key="item.Id" tabindex="1"
                        @ondrop="@(() => Drop(item))" @ondrag="@(() => StartDrag(item))">
                        <img class="foeImg" src="@item.Foe.ImagePath">
                        <img src="@item.FoeStaminaImage">
                    </li>
                }
                else
                {
                    <li>NULL??</li>
                }
            }

        </ul>
    </div>
</div>


@code {
    List<Foe> _foes = new List<Foe>();
    List<FoeForDetHex> _foeDetHex = new List<FoeForDetHex>();

    int currentIndex;


    public void GetNewLobby()
    {
        _foes.Clear();
        _foes = Foe.GetNewLobby(8);

        _foeDetHex = new List<FoeForDetHex>();

        for (int i = 0; i < _foes.Count; i++)
        {
            Foe foe = _foes[i];

            // randomly select % foe stamina bar (red for normal or purple for elite
            Random rnd = new Random();

            string foeStaminaImg;
            if (foe.Elite)

                // TODO - create all these images
                foeStaminaImg = rnd.Next(0, 100) switch
                {
                    > 75 => "/images/foestamina/Elite100.png",                // use 100 elite image
                    < 75 and >= 50 => "/images/foestamina/Elite75.png",      // use 75 elite image
                    < 50 and >= 25 => "/images/foestamina/Elite50.png",      // use 50 elite image
                    _ => "/images/foestamina/Elite25.png" // default value   // use 25 elite image
                };

            else
                foeStaminaImg = rnd.Next(0, 100) switch
                {
                    > 75 => "/images/foestamina/stamina100.png",                // use 100 image
                    < 75 and >= 50 => "/images/foestamina/stamina75.png",      // use 75 image
                    < 50 and >= 25 => "/images/foestamina/stamina50.png",      // use 50 image
                    _ => "/images/foestamina/stamina25.png" // default value   // use 25 image
                };

            // randomly select a foe to be fighting or not


            // if foe is being fought, select a profession to fight it (as you as a Prof are looking at this, max 1 prof

            // randomly add auror hexes - only 'valid' hexes
            bool hasConfusion = false;
            if (
                (foe.Type == FoeType.DarkWizard && (int)foe.Stars == 5) ||
                    (foe.Type == FoeType.Erkling && (int)foe.Stars >= 4)
                )
            {

                if (rnd.Next(0, 2) == 1)
                {
                    hasConfusion = true;
                }

            }

            _foeDetHex.Add(new FoeForDetHex(foe, i, foeStaminaImg, hasConfusion));
        }

    }

    int GetIndex(FoeForDetHex item)
    {
        return _foeDetHex.FindIndex(a => a.Id == item.Id);
    }

    void StartDrag(FoeForDetHex item)
    {
        currentIndex = GetIndex(item);
        Console.WriteLine($"DragStart for {item.Id} index {currentIndex}");
    }

    void Drop(FoeForDetHex item)
    {
        if (item != null)
        {
            Console.WriteLine($"Drop item {item.Foe.FoeNameStarAndName} ({item.Id})");
            var index = GetIndex(item);
            Console.WriteLine($"Drop index is {index}, move from {currentIndex}");
            // get current item
            var current = _foeDetHex[currentIndex];
            // remove game from current index
            _foeDetHex.RemoveAt(currentIndex);
            _foeDetHex.Insert(index, current);

            // update current selection
            currentIndex = index;

            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Drop - null");
        }
    }

}



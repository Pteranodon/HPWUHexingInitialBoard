@page "/training"
@page "/training/{Id:int}"

@using HPWUHexingTrainer.Classes
@using System.Threading;
@using Humanizer;

@implements IDisposable
@using Toolbelt.Blazor.HotKeys
@inject HotKeys HotKeys

@*<div class="d-none d-xl-block" style="background: #007bff; color: #fff; padding: 5px; text-align: center;">XL</div>
    <div class="d-none d-lg-block d-xl-none" style="background: #27a745; color: #fff; padding: 5px; text-align: center;">LG</div>
    <div class="d-none d-md-block d-lg-none" style="background: #ffc108; color: #fff; padding: 5px; text-align: center;">MD</div>
    <div class="d-none d-sm-block d-md-none" style="background: #18a2b8; color: #fff; padding: 5px; text-align: center;">SM</div>
    <div class="d-block d-sm-none" style="background: #dc3545; color: #fff; padding: 5px; text-align: center;">XS</div>*@

<h5>See how quickly you can read some lobbies</h5>

<div class="row pt-2">

    <div class="col" hidden=@(currentId == -1)>Test: @(_state.ShowAdvancedRules ? "Advanced" : "Standard") - @_selectedPretty @_state.NumberLobbies lobbies - penalty: @_state.PenaltySeconds secs</div>

    <div class="col-lg-7 col-xl-6" hidden="@(currentId != -1)">

        <button class="btn  @(_selected == "proficiency" ? "btn-primary" : "btn-outline-primary")  mt-1" @onclick="@(e => SetTrainingType("proficiency"))" disabled="@IsSettingDisabled">Proficiency</button>
        <button class="btn  @(_selected == "focus" ? "btn-primary" : "btn-outline-primary") ml-1 mt-1" @onclick="@(e => SetTrainingType("focus"))" disabled="@IsSettingDisabled">Focus</button>
        <button class="btn  @(_selected == "shields" ? "btn-primary" : "btn-outline-primary") ml-1 mt-1" @onclick="@(e => SetTrainingType("shields"))" disabled="@IsSettingDisabled">Shields</button>


        <button class="btn btn-outline-primary ml-3 mt-1" @onclick="ChangeAnswerRules" disabled="@IsSettingDisabled">
            Using @(_state.ShowAdvancedRules ? "Advanced" : "Standard")
        </button>

        <button class="btn btn-outline-primary mt-1" @onclick="ChangeShowProgress" disabled="@IsSettingDisabled">
            @(_state.ShowProgressDuringTraining ? "Showing Progress" : "Don't show progress")
        </button>
    </div>
    <div class="col-lg col-xl-6 pt-2 pt-lg-0" hidden="@(currentId != -1)">
        <table>
            <tr>
                <td><label>Lobbies in test?</label></td>
                <td> <input class="ml-2" type="number" min="1" max="50" @bind="lobbiesToRun" disabled="@IsSettingDisabled" /> </td>
            </tr>
            <tr>
                <td><label>Error penalty in seconds?</label></td>
                <td><input class="ml-2" type="number" min="1" max="20" @bind="penaltySeconds" disabled="@IsSettingDisabled" /></td>
            </tr>

            @*<tr>
                <td colspan="2"><button class="btn btn-outline-primary" @onclick="ChangeShowProgress" disabled="@IsSettingDisabled">
                @(_state.ShowProgressDuringTraining ? "Showing Progress" : "Don't show progress")</button></td>
                </tr>*@
        </table>
    </div>
</div>

<div class="row pt-2">
    <div class="col">
        <button class="btn btn-outline-success @(IsSettingDisabled ? "active" : "")" @onclick="StartTimer" disabled=@trainingInProgress>Start</button>
        <button class="btn btn-outline-primary " @onclick="StopTimer">Finish</button>
        <label class="font-weight-bold ml-3" hidden="@_hideTimerElement">Time: @_timeElapsed seconds</label>
    </div>
</div>

<div class="row pt-2" hidden=@(!trainingInProgress)>
    <div col-sm-5>
        <LobbyImage @ref="_li"></LobbyImage>
    </div>
    <div col-sm>
        <div class="row ml-3 pt-1">
            <div col>
                <button class="btn btn-lg btn-outline-primary " @onclick="() => GetAnswer(true)" hidden=@(_selected != "proficiency")>Yes</button>
                <button class="btn btn-lg btn-outline-primary ml-3" @onclick="() => GetAnswer(false)" hidden=@(_selected != "proficiency")>No</button>

                @if (!_hideNumbers)
                {
                    var maxCnt = _selected == "focus" ? 5 : 4;
                    @for (int btnNum = 1; btnNum < maxCnt; btnNum++)
                    {
                        var local_num = btnNum;
                        <button id="focus-button-@btnNum" class="btn btn-lg btn-outline-primary mr-2" type="button" @onclick="() => GetAnswer(false, local_num)">@btnNum</button>
                    }
                }
                @*<div hidden=@(_selected.Substring(1,1) == "A")>
                    <table>
                        <tr>
                            <td>Fights</td>
                            <td>Weakening</td>
                            <td>Confusion</td>
                        </tr>
                        <tr>
                            <td>
                                <select class="form-control w-auto" @bind="@_a1Answers.MyFoe">

                                    <option value=""></option>
                                    @foreach (var foe in _foes)
                                    {
                                        @if (foe.Type == FoeType.DarkWizard || foe.Type == FoeType.DeathEater)
                                        {
                                            <option value="@_state.FoeFullName(foe)"> @_state.FoeFullName(foe) </option>
                                        }
                                    }
                                </select>
                            </td>
                            <td><button class="btn @(_p1Answers.Weakening ? "btn-primary" : "btn-outline-primary")" @onclick="@(e => P1Answers("Weakening", "yes"))">Yes</button></td>
                            <td><button class="btn @(_p1Answers.Weakening ? "btn-outline-primary" : "btn-primary")" @onclick="@(e => P1Answers("Weakening", "no"))">No</button></td>
                        </tr>
                        <tr>
                            <td>Foe gets Weakening</td>

                        </tr>
                        <tr>
                            <td>Foe gets Confusion</td>
                            <td><button class="btn @(_p1Answers.Confusion ? "btn-primary" : "btn-outline-primary")" @onclick="@(e => P1Answers("Confusion", "yes"))">Yes</button></td>
                            <td><button class="btn @(_p1Answers.Confusion ? "btn-outline-primary" : "btn-primary")" @onclick="@(e => P1Answers("Confusion", "no"))">No</button></td>
                        </tr>
                    </table>

                    <button class="btn btn-outline-primary pt-1" @onclick="() => GetAnswer(false, 0)">Next</button>
                </div>*@
                <div hidden=@(_selected != "P1")>
                    <table>
                        <tr>
                            <td>Shields A2</td>
                            <td><button class="btn @(_p1Answers.ShieldsA2 ? "btn-primary" : "btn-outline-primary")" @onclick="@(e => P1Answers("ShieldsA2", "yes"))">Yes</button></td>
                            <td><button class="btn @(_p1Answers.ShieldsA2 ? "btn-outline-primary" : "btn-primary")" @onclick="@(e => P1Answers("ShieldsA2", "no"))">No</button></td>


                        </tr>
                        <tr>
                            <td>Shields P2</td>
                            <td><button class="btn @(_p1Answers.ShieldsP2 ? "btn-primary" : "btn-outline-primary")" @onclick="@(e => P1Answers("ShieldsP2", "yes"))">Yes</button></td>
                            <td><button class="btn @(_p1Answers.ShieldsP2 ? "btn-outline-primary" : "btn-primary")" @onclick="@(e => P1Answers("ShieldsP2", "no"))">No</button></td>
                        </tr>
                        <tr>
                            <td>Fights</td>
                            <td colspan=2>
                                <select class="form-control w-auto" @bind="@_p1Answers.FoeName">

                                    <option value=""></option>
                                    @foreach (var foe in _foes)
                                    {
                                        @if (foe.Type == FoeType.Pixie || foe.Type == FoeType.Werewolf)
                                        {
                                            <option value="@_state.FoeFullName(foe)"> @_state.FoeFullName(foe) </option>
                                        }
                                    }
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <td>Foe gets Weakening</td>
                            <td><button class="btn @(_p1Answers.Weakening ? "btn-primary" : "btn-outline-primary")" @onclick="@(e => P1Answers("Weakening", "yes"))">Yes</button></td>
                            <td><button class="btn @(_p1Answers.Weakening ? "btn-outline-primary" : "btn-primary")" @onclick="@(e => P1Answers("Weakening", "no"))">No</button></td>
                        </tr>
                        <tr>
                            <td>Foe gets Confusion</td>
                            <td><button class="btn @(_p1Answers.Confusion ? "btn-primary" : "btn-outline-primary")" @onclick="@(e => P1Answers("Confusion", "yes"))">Yes</button></td>
                            <td><button class="btn @(_p1Answers.Confusion ? "btn-outline-primary" : "btn-primary")" @onclick="@(e => P1Answers("Confusion", "no"))">No</button></td>
                        </tr>
                    </table>

                    <button class="btn btn-outline-primary pt-1" @onclick="() => GetAnswer(false, 0)">Next</button>
                </div>
            </div>
        </div>
        <div class="row ml-3 pt-2" hidden=@(_selected != "focus")>
            <div col>
                @for (int focus = 5; focus < 9; focus++)
                {
                    var local_focus = focus;
                    <button id="focus-button-@focus" class="btn btn-lg btn-outline-primary mr-2" type="button" @onclick="() => GetAnswer(false, local_focus)">@focus</button>
                }
            </div>
        </div>
        <div class="row ml-3" hidden=@(!_state.ShowProgressDuringTraining)>
            <div col>
                <label class="pt-2">Correct: @correct Incorrect: @incorrect</label>
            </div>
        </div>
    </div>
</div>
<div class="pt-3" hidden=@(!trainingFinished)>Test: @_methodUsed @_selectedUsed Penalty: @_secondsDelayUsed</div>


<h5 class="pt-1" hidden=@(!trainingFinished)>@result</h5>
<h5 hidden=@(!trainingFinished || correct + incorrect == 0)>@resultAverage</h5>
<h5 class=@(passFailText == "Pass" ? "text-success" : "text-danger") hidden=@(!trainingFinished || correct + incorrect == 0)>@passFailText</h5>

<button class="btn btn-outline-primary " @onclick="ReviewAnswers" hidden=@hideReviewButton>@reviewButtonName</button>

<div class="row pt-2" hidden=@(!reviewInProgress)>
    <div class="col-sm-6 col-md-4 col-lg-2">
        <table>
            <tr>
                <td>Lobby:</td>
                <td>@reviewItem</td>
            </tr>
            <tr>
                <td class="align-top">You:</td>
                <td>@((MarkupString)yourAnswer)</td>
            </tr>
            <tr>
                <td class="align-top">Correct:</td>
                <td>@((MarkupString)@correctAnswer)</td>
            </tr>
            @*            <tr>
                <td class=@(passFailText == "Pass" ? "text-success" : "text-warning") colspan="2">@passFailText</td>
                </tr>*@
        </table>
    </div>
    <div>
        <LobbyImage @ref="_liReview"></LobbyImage>
    </div>
    <div class="col-12 col-lg xl pt-2 pt-lg-0">
        <LobbyResultComponent @ref="lrc"></LobbyResultComponent>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    public UserSettings _state { get; set; }

    //int lobbiesToRun => _state.NumberLobbies;
    //int penaltySeconds => _state.PenaltySeconds;

    int lobbiesToRun;
    int penaltySeconds;
    //bool proficiencySelected = true;
    string _selected = "proficiency";
    string _selectedPretty => _selected.Humanize(LetterCasing.Title);

    P1Stuff _p1Answers = new P1Stuff();
    //AurorStuff _a1Answers = new AurorStuff();
    //AurorStuff _a2Answers = new AurorStuff();


    protected bool IsSettingDisabled { get; set; }

    List<Result> _results = new List<Result>();

    int lobbiesRead = 0;
    int correct = 0;
    int incorrect = 0;
    bool trainingInProgress = false;
    bool trainingFinished = false;
    bool reviewInProgress = false;
    int reviewItem = 0;
    string result;
    string resultAverage;
    //bool _hideResultElement = true;  // show only once they've clicked review
    bool hideReviewButton = true;
    string reviewButtonName = "Review Incorrect";
    bool _hideTimerElement = true;
    bool _hideNumbers = true;

    int _secondsDelayUsed;
    string _selectedUsed;
    string _methodUsed;
    int currentId = -1;

    private string _timeElapsed = "0.0";
    Stopwatch myWatch = new Stopwatch();



    private double Count { get; set; } = 0;
    bool timerStarted = true;
    Timer timer;

    LobbyImage _li = new LobbyImage();
    LobbyImage _liReview = new LobbyImage();

    LobbyResult lr = new LobbyResult();
    List<Foe> _foes = new List<Foe>();

    LobbyResultComponent lrc = new LobbyResultComponent();

    string yourAnswer;
    string correctAnswer;
    string passFailText;


    HotKeysContext HotKeysContext;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        currentId = Id ?? -1;
        ChangedTrainingType();

        lobbiesToRun = _state.NumberLobbies;
        penaltySeconds = _state.PenaltySeconds;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Id = Id ?? -1;

        // only do this is we've changed the type of training
        if (Id != currentId)
        {
            currentId = Id ?? -1;

            StopTimer();
            reviewInProgress = false;
            hideReviewButton = true;
            reviewInProgress = false;
            trainingFinished = false;
            _hideTimerElement = true;

            ChangedTrainingType();
        }
    }


    #region Training settings
    void SetTrainingType(string type)
    {
        _selected = type;

        if (_selected == "focus" || _selected == "shields")
            _hideNumbers = false;
        else
            _hideNumbers = true;

        Refresh();
    }

    void ChangedTrainingType()
    {
        if (currentId == 1)
            SetTrainingType("proficiency");
        else if (currentId == 2)
            SetTrainingType("focus");
        else if (currentId == 3)
            SetTrainingType("shields");

        else if (currentId == 4)
            SetTrainingType("P1");


    }

    private void ChangeAnswerRules()
    {
        _state.ShowAdvancedRules = !_state.ShowAdvancedRules;
    }

    #endregion

    #region clock functions
    void StartClock()
    {
        timer = new Timer(new TimerCallback(_ =>
        {
            if (timerStarted)
            {
                Count += 0.1;

                _timeElapsed = String.Format("{0:0.0}", Count);

                // Note that the following line is necessary because otherwise
                // Blazor would not recognize the state change and not refresh the UI
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }), null, 100, 100);
    }


    void StartTimer()
    {
        if (_selected == "proficiency")
            AddHotkeysYN();
        else if (_selected == "focus")
            AddHotkeysFocus();
        else if (_selected == "shields")
            AddHotkeysShields();

        _secondsDelayUsed = penaltySeconds; // set this at start to display after training.
        _selectedUsed = _selectedPretty;
        _methodUsed = _state.ShowAdvancedRules ? "Advanced" : "Standard";

        Count = 0.0;
        _timeElapsed = String.Format("{0:0.0}", Count);
        timerStarted = true;
        IsSettingDisabled = true;
        lobbiesRead = 0;
        correct = 0;
        incorrect = 0;
        trainingInProgress = true;
        trainingFinished = false;
        reviewInProgress = false;
        reviewItem = 0;
        reviewButtonName = "Review Incorrect";
        hideReviewButton = true;
        _results.Clear();

        _hideTimerElement = !_state.ShowTimer;

        StartClock();
        GetNextLobby();
    }

    void StopTimer()
    {
        timerStarted = false;

        if (timer != null)
            timer.Dispose();

        IsSettingDisabled = false;
        trainingInProgress = false;
        trainingFinished = true;

        var totalAnswered = correct + incorrect;
        double percent = totalAnswered == 0 ? 0 : correct * 1.0 / totalAnswered;

        result = $"Results: { correct }/{ totalAnswered } Percent: { String.Format("{0:P1}", percent) }";

        // if we're not showing progress during training, add the penalty time to the timer now for each incorrect answer
        if (!_state.ShowProgressDuringTraining)
            Count += (penaltySeconds * incorrect);

        _timeElapsed = String.Format("{0:0.0}", Count);
        var avg = totalAnswered == 0 ? 0 : Count * 1.0 / totalAnswered;


        resultAverage = $"Average Time: { String.Format("{0:0.00}", avg) } seconds";

        bool percentPass = totalAnswered > 0 && percent * 100 >= 80;

        // set proficiency and shield average to 8
        bool timePass = (_selected != "focus" && avg <= 8) || (_selected == "focus" && avg <= 12);

        passFailText = percentPass && timePass ? "Pass" : "Try Again";

        if (incorrect > 0)
            hideReviewButton = false;


        _hideTimerElement = false;              // Show now even if they chose to hide in settings

        if (HotKeysContext != null)
            this.HotKeysContext.Dispose();

        Refresh();
    }
    #endregion



    private void GetNextLobby()
    {
        if (lobbiesRead < lobbiesToRun)
        {
            lobbiesRead++;

            // show the next lobby
            _foes = Foe.GetNewLobby();

            // read the lobby
            lr = new LobbyReader(_foes, _state).Read();
            Foe.PositionFoes(_foes);

            _li.Foes = _foes.ToList();
            _li.ImgSrc = "images/blankboard.png"; ;
            _li.HideImage = false;
            _li.Refresh();
            _li.Refresh();

            if (_selected == "P1")
                _p1Answers = new P1Stuff();
        }
        else
        {
            StopTimer();
        }
    }

    private void GetAnswer(bool proficiency, int value = 0)
    {
        if (lobbiesRead > lobbiesToRun)
            StopTimer();
        else
        {
            bool isCorrect = true;

            if (_selected == "shields")
            {

            }
            var shieldsSelected = 1 +
                    (lr.P1ShieldsA2 ? 1 : 0) +
                    (lr.P2ShieldsA2 ? 1 : 0) +
                    (lr.P1ShieldsP2 ? 1 : 0);


            bool P1Correct = CheckP1();

            if ((_selected == "proficiency" && lr.Proficiency == proficiency) ||
                    (_selected == "focus" && lr.A1FocusPassed + lr.A2FocusPassed == value) ||
                    (_selected == "shields" && shieldsSelected == value) ||
                    (_selected == "P1" && P1Correct)
        )

                correct++;
            else
            {
                isCorrect = false;
                incorrect++;

                // if they got it wrong, add the penalty time to the timer if they are showing the correct/incorrect values
                if (_state.ShowProgressDuringTraining)
                    Count += penaltySeconds;
            }

            // add this foe list and result to a list for review later
            _results.Add(new Result(lobbiesRead, _foes, lr, proficiency, value, isCorrect, _p1Answers));

            GetNextLobby();
        }
    }


    private void P1Answers(string AnswerType, string answer)
    {
        if (AnswerType == "ShieldsA2")
            _p1Answers.ShieldsA2 = answer == "yes" ? true : false;

        if (AnswerType == "ShieldsP2")
            _p1Answers.ShieldsP2 = answer == "yes" ? true : false;

        if (AnswerType == "Weakening")
            _p1Answers.Weakening = answer == "yes" ? true : false;

        if (AnswerType == "Confusion")
            _p1Answers.Confusion = answer == "yes" ? true : false;
    }

    private bool CheckP1()
    {
        _p1Answers.ShieldA2Correct = lr.P1ShieldsA2 == _p1Answers.ShieldsA2;
        _p1Answers.ShieldP2Correct = lr.P1ShieldsP2 == _p1Answers.ShieldsP2;

        FoeFighter P1Foe = lr.FoeFighters.FirstOrDefault(f => f.FoughtBy == "P1");

        bool P1Weakening = false, P1Confusion = false;
        string P1Fights = null;

        if (P1Foe != null)
        {
            P1Weakening = P1Foe.Hexes.Any(h => h.ToString() == HexType.Weakening.ToString());
            P1Confusion = P1Foe.Hexes.Any(h => h.ToString() == HexType.Confusion.ToString());
            P1Fights = P1Foe.FoeName;
        }

        _p1Answers.WeakeningCorrect = _p1Answers.Weakening == P1Weakening;
        _p1Answers.ConfusionCorrect = _p1Answers.Confusion == P1Confusion;
        _p1Answers.FoeCorrect = _p1Answers.FoeName == P1Fights;

        _p1Answers.P1Correct = _p1Answers.ShieldA2Correct &&
        _p1Answers.ShieldP2Correct &&
        _p1Answers.WeakeningCorrect &&
        _p1Answers.ConfusionCorrect &&
        _p1Answers.FoeCorrect;

        return _p1Answers.P1Correct; ;
    }


    private void ReviewAnswers()
    {
        if (!reviewInProgress)
        {
            reviewItem = 0;
            reviewInProgress = true;
            reviewButtonName = "Next";
        }

        Result incorrectResult = _results.Where(r => !r.CorrectAnswer && r.LobbyNumber > reviewItem).FirstOrDefault();

        if (incorrectResult != null)
        {
            reviewItem = incorrectResult.LobbyNumber;

            if (_selected == "P1")
            {
                yourAnswer = $"Shields A2: { (incorrectResult.P1Results.ShieldsA2 ? "Yes" : "No") }<br />";
                yourAnswer += $"Shields P2: { (incorrectResult.P1Results.ShieldsP2 ? "Yes" : "No") }<br />";
                yourAnswer += $"Fights: { incorrectResult.P1Results.FoeName }<br />";
                yourAnswer += $"Weakening: { (incorrectResult.P1Results.Weakening ? "Yes" : "No") }<br />";
                yourAnswer += $"Confusion: { (incorrectResult.P1Results.Confusion ? "Yes" : "No") }";

                correctAnswer = $"Shields A2: { (incorrectResult.LobbyResult.P1ShieldsA2 ? "Yes" : "No") }<br />";
                correctAnswer += $"Shields P2: { (incorrectResult.LobbyResult.P1ShieldsP2 ? "Yes" : "No") }<br />";

                FoeFighter ff = incorrectResult.LobbyResult.FoeFighters.FirstOrDefault(f => f.FoughtBy == "P1");
                correctAnswer += $"Fights: { (ff == null ? "" : ff.FoeNameWithHexes) }";
            }

            else if (_selected == "proficiency")
            {
                yourAnswer = incorrectResult.ProficiencyAnswer ? "Yes" : "No";
                correctAnswer = incorrectResult.LobbyResult.Proficiency ? "Yes" : "No";
            }
            else
            {
                yourAnswer = incorrectResult.OtherAnswer.ToString();

                if (_selected == "shields")
                    correctAnswer = (1 + (incorrectResult.LobbyResult.P1ShieldsA2 ? 1 : 0) +
                        (incorrectResult.LobbyResult.P2ShieldsA2 ? 1 : 0) +
                        (incorrectResult.LobbyResult.P1ShieldsP2 ? 1 : 0))
                        .ToString();
                else
                    correctAnswer = (incorrectResult.LobbyResult.A1FocusPassed + incorrectResult.LobbyResult.A2FocusPassed).ToString();
            }

            _liReview.Foes = incorrectResult.FoesList;
            _liReview.ImgSrc = "images/blankboard.png"; ;
            _liReview.HideImage = false;
            _liReview.Refresh();

            lrc.lobbyResult = incorrectResult.LobbyResult;
            lrc.Refresh();
        }
        else
        {
            reviewInProgress = false;
            reviewButtonName = "Review Incorrect";
        }
    }


    private void ChangeShowProgress()
    {
        _state.ShowProgressDuringTraining = !_state.ShowProgressDuringTraining;
    }


    public void Refresh()
    {
        StateHasChanged();
    }

    public void AddHotkeysYN()
    {
        this.HotKeysContext = this.HotKeys.CreateContext()
    .Add(ModKeys.None, Keys.Y, () => GetAnswer(true))
    .Add(ModKeys.None, Keys.N, () => GetAnswer(false));
    }
    public void AddHotkeysFocus()
    {
        this.HotKeysContext = this.HotKeys.CreateContext()
    .Add(ModKeys.None, Keys.Num1, () => GetAnswer(false, 1))
    .Add(ModKeys.None, Keys.Num2, () => GetAnswer(false, 2))
    .Add(ModKeys.None, Keys.Num3, () => GetAnswer(false, 3))
    .Add(ModKeys.None, Keys.Num4, () => GetAnswer(false, 4))
    .Add(ModKeys.None, Keys.Num5, () => GetAnswer(false, 5))
    .Add(ModKeys.None, Keys.Num6, () => GetAnswer(false, 6))
    .Add(ModKeys.None, Keys.Num7, () => GetAnswer(false, 7))
    .Add(ModKeys.None, Keys.Num8, () => GetAnswer(false, 8));
    }
    public void AddHotkeysShields()
    {
        this.HotKeysContext = this.HotKeys.CreateContext()
    .Add(ModKeys.None, Keys.Num1, () => GetAnswer(false, 1))
    .Add(ModKeys.None, Keys.Num2, () => GetAnswer(false, 2))
    .Add(ModKeys.None, Keys.Num3, () => GetAnswer(false, 3));
    }


    public void Dispose()
    {
        if (HotKeysContext != null)
            this.HotKeysContext.Dispose();
    }

}



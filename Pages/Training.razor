@page "/training"
@using HPWUHexingTrainer.Classes
@using System.Threading;

<div class="d-none d-xl-block" style="background: #007bff; color: #fff; padding: 5px; text-align: center;">XL</div>
<div class="d-none d-lg-block d-xl-none" style="background: #27a745; color: #fff; padding: 5px; text-align: center;">LG</div>
<div class="d-none d-md-block d-lg-none" style="background: #ffc108; color: #fff; padding: 5px; text-align: center;">MD</div>
<div class="d-none d-sm-block d-md-none" style="background: #18a2b8; color: #fff; padding: 5px; text-align: center;">SM</div>
<div class="d-block d-sm-none" style="background: #dc3545; color: #fff; padding: 5px; text-align: center;">XS</div>

<h5>See how quickly you can read some lobbies</h5>

<div class="row pt-2">
    <div class="col-lg-7 col-xl-6">
        <button class="btn  @(proficiencySelected ? "btn-primary" : "btn-outline-primary")" @onclick="SetAsProficiency" disabled="@IsSettingDisabled">Proficiency</button>
        <button class="btn  @(proficiencySelected ? "btn-outline-primary" : "btn-primary") ml-1" @onclick="SetAsFocus" disabled="@IsSettingDisabled">Focus</button>

        <button class="btn btn-outline-primary ml-3" @onclick="ChangeAnswerRules" disabled="@IsSettingDisabled">
            @(_state.ShowAdvancedRules ? "Standard" : "Advanced") rules
        </button>
    </div>
    <div class="col-lg col-xl-6 pt-2 pt-lg-0">
        <table>
            <tr>
                <td>
                    <label>Boards in test?</label>
                </td>
                <td>
                    <input class="ml-2" type="number" min="1" max="50" @bind="lobbiesToRun" disabled="@IsSettingDisabled" />
                </td>
            </tr>
            <tr>
                <td>
                    <label>Error penalty in seconds?</label>
                </td>
                <td>
                    <input class="ml-2" type="number" min="1" max="20" @bind="penaltySeconds" disabled="@IsSettingDisabled" />
                </td>
            </tr>
        </table>
        @*<div class="row">
            <div col-11>
                <label>How many boards in test?</label>
            </div>
            <div col-1>
                <input class="ml-2" type="number" min="1" max="50" @bind="lobbiesToRun" disabled="@IsSettingDisabled" />
            </div>
        </div>
        <div class="row pt-1">
            <div col-11>
                Error penalty in seconds?
            </div>
            <div col-1>
                <input class="ml-2" type="number" min="1" max="20" @bind="penaltySeconds" disabled="@IsSettingDisabled" />
            </div>
        </div>*@
    </div>

    @*<div class="col-lg col-xl-6">
        <div class="row">
            <div col-11>
                How many boards in test?
            </div>
            <div col-1>
                <input class="ml-2" type="number" min="1" max="50" @bind="lobbiesToRun" disabled="@IsSettingDisabled" />
            </div>
        </div>
        <div class="row pt-1">
            <div col-11>
                Error penalty in seconds?
            </div>
            <div col-1>
                <input class="ml-2" type="number" min="1" max="20" @bind="penaltySeconds" disabled="@IsSettingDisabled" />
            </div>
        </div>*@
</div>

<div class="row pt-2">
    <div class="col">
        <button class="btn btn-outline-success @(IsSettingDisabled ? "active" : "")" @onclick="StartTimer" disabled=@trainingInProgress>Start</button>
        <button class="btn btn-outline-primary " @onclick="StopTimer">Finish</button>
        <label class="font-weight-bold ml-3">Time: @_timeElapsed seconds</label>
    </div>
</div>

<div class="row pt-2" hidden=@(!trainingInProgress)>
    <div col-sm-5>
        <LobbyImage @ref="_li"></LobbyImage>
    </div>
    <div col-sm>
        <div class="row ml-3 pt-1">
            <div col>
                <button class="btn btn-lg btn-outline-primary " @onclick="() => IsProficiency(true)" hidden=@(!proficiencySelected)>Yes</button>
                <button class="btn btn-lg btn-outline-primary ml-3" @onclick="() => IsProficiency(false)" hidden=@(!proficiencySelected)>No</button>

                @if (!proficiencySelected)
                {
                    @for (int focus = 1; focus < 5; focus++)
                    {
                        var local_focus = focus;
                        <button id="focus-button-@focus" class="btn btn-lg btn-outline-primary mr-2" type="button" @onclick="() => GetFocus(local_focus)">@focus</button>
                    }
                }

            </div>
        </div>
        <div class="row ml-3 pt-2" hidden="@proficiencySelected">
            <div col>
                @for (int focus = 5; focus < 9; focus++)
                {
                    var local_focus = focus;
                    <button id="focus-button-@focus" class="btn btn-lg btn-outline-primary mr-2" type="button" @onclick="() => GetFocus(local_focus)">@focus</button>
                }
            </div>
        </div>
        <div class="row ml-3">
            <div col>
                <label class="pt-2">Correct: @correct Incorrect: @incorrect</label>
            </div>
        </div>
    </div>
</div>
<h5 class="pt-3" hidden=@(!trainingFinished)>@result</h5>
<h5 hidden=@(!trainingFinished)>@resultAverage</h5>


@code {
    [CascadingParameter]
    public UserSettings _state { get; set; }

    int lobbiesToRun = 20;
    int penaltySeconds = 8;
    bool proficiencySelected = true;
    protected bool IsSettingDisabled { get; set; }

    //int focusPassed;

    int lobbiesRead = 0;
    int correct = 0;
    int incorrect = 0;
    bool trainingInProgress = false;
    bool trainingFinished = false;
    string result;
    string resultAverage;

    private string _timeElapsed = "0.0";
    Stopwatch myWatch = new Stopwatch();



    private double Count { get; set; } = 0;
    bool timerStarted = true;
    Timer timer;

    LobbyImage _li = new LobbyImage();
    LobbyResult lr = new LobbyResult();
    List<Foe> _foes = new List<Foe>();

    #region Training settings
    void SetAsProficiency()
    {
        proficiencySelected = true;
        penaltySeconds = 8;
    }

    void SetAsFocus()
    {
        proficiencySelected = false;
        penaltySeconds = 10;
    }

    private void ChangeAnswerRules()
    {
        _state.ShowAdvancedRules = !_state.ShowAdvancedRules;
    }

    #endregion

    #region clock functions
    void StartClock()
    {
        timer = new Timer(new TimerCallback(_ =>
        {
            if (timerStarted)
            {
                Count += 0.5;

                _timeElapsed = String.Format("{0:0.0}", Count);

            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }), null, 500, 500);
    }


    void StartTimer()
    {
        Count = 0.0;
        _timeElapsed = String.Format("{0:0.0}", Count);
        timerStarted = true;
        IsSettingDisabled = true;
        lobbiesRead = 0;
        correct = 0;
        incorrect = 0;
        trainingInProgress = true;
        trainingFinished = false;

        StartClock();
        GetNextLobby();
    }

    void StopTimer()
    {
        timerStarted = false;
        timer.Dispose();
        IsSettingDisabled = false;
        trainingInProgress = false;
        trainingFinished = true;

        result = $"Results: { correct }/{lobbiesRead } Percent: { String.Format("{0:P1}", (correct * 1.0 / lobbiesRead)) }";
        resultAverage = $"Average Time: { String.Format("{0:0.0}", Count / lobbiesRead) } seconds";
    }
    #endregion



    private void GetNextLobby()
    {
        if (lobbiesRead < lobbiesToRun)
        {
            lobbiesRead++;

            // show the next lobby
            _foes = Foe.GetNewLobby();
            Foe.PositionFoes(_foes);

            _li.Foes = _foes.ToList();
            _li.ImgSrc = "images/blankboard.png"; ;
            _li.HideImage = false;
            _li.Refresh();
        }
        else
        {
            StopTimer();
        }
    }

    //private void ProficiencyYes()
    //{
    //    IsProficiency(true);
    //}

    //private void ProficiencyNo()
    //{
    //    IsProficiency(false);
    //}

    private void IsProficiency(bool proficiency)
    {
        // read the lobby
        lr = LobbyReader.Read(_foes, _state);

        // compare answer with lobby reader.proficiency
        if (lr.Proficiency == proficiency)
        {
            correct++;
        }
        else
        {
            incorrect++;

            // if they got it wrong, add the penalty time to the timer
            Count += penaltySeconds;
        }
        GetNextLobby();
    }

    protected void GetFocus(int focus)
    {
        // read the lobby
        lr = LobbyReader.Read(_foes, _state);

        if (lr.A1FocusPassed + lr.A2FocusPassed == focus)
            correct++;
        else
        {
            incorrect++;

            // if they got it wrong, add the penalty time to the timer
            Count += penaltySeconds;
        }
        GetNextLobby();
    }


    //private void GetNext()
    //{
    //    // read the lobby
    //    lr = LobbyReader.Read(_foes, _state);

    //    if (lr.A1FocusPassed + lr.A2FocusPassed == focusPassed)
    //        correct++;
    //    else
    //    {
    //        incorrect++;

    //        // if they got it wrong, add the penalty time to the timer
    //        Count += penaltySeconds;
    //    }
    //    GetNextLobby();
    //}


    public void Refresh()
    {
        StateHasChanged();
    }

}



@page "/test"
@page "/test/{Id:int}"

@using HPWUHexingTrainer.Shared
@using HPWUHexingTrainer.Classes

<h3>Test yourself with some lobbies from the training sessions</h3>

<div class="row pt-2">
    <div class="col">
        <button class="btn btn-outline-primary" @onclick="GetNewLobby">New Lobby</button>

        <label class="pl-1" for="chkRandom">Random order?</label>
        <input id="chkRandom" type="checkbox" @bind="@randomTests" />
        <label class=" h4 pt-2 pl-2">@_imgName</label>
        <label class=" pt-2 pl-2">@_methodUsed</label>
    </div>
</div>

<div class="row pt-2">
    <div class="col">
        <LobbyDetails @ref="_bd"></LobbyDetails>
    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    public UserSettings _state { get; set; }

    private LobbyDetails _bd = new LobbyDetails();
    private List<Foe> _foes = new List<Foe>();
    private bool randomTests = false;
    private int testListElement = -1;
    private string _imgName;
    private List<TestLobby> _testLobbies;
    private string _methodUsed;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        getCurrentSettings();

        Id = Id ?? -1;

        if (Id.Value >= 0)
        {
            _testLobbies = GenerateTestLobbies.Create();
            LoadLobby(_testLobbies[Id.Value]);
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (Id.Value >= 0)
        {
            RefreshLobbyDetails(_testLobbies[Id.Value]); // this needs to wait until rendering complete
            testListElement = Id.Value;
            Id = -1;
        }
    }


    public void GetNewLobby()
    {
        _testLobbies = GenerateTestLobbies.Create();

        if (randomTests)
        {
            Random rnd = new Random();
            testListElement = rnd.Next(0, _testLobbies.Count);
        }
        else
        {
            testListElement++;

            // if we are past the end of the list, go to the start again
            if (testListElement == _testLobbies.Count)
                testListElement = 0;
        }

        LoadLobby(_testLobbies[testListElement]);
        RefreshLobbyDetails(_testLobbies[testListElement]);
    }

    private void LoadLobby(TestLobby tb)
    {
        _foes.Clear();
        _bd.Clear();

        if (tb is null)
            return;

        _imgName = tb.Name ?? "Lobby X";

        if (tb.Foes != null)
            _foes = tb.Foes;
    }

    private void getCurrentSettings()
    {
        _methodUsed = $"{(_state.ShowAdvancedRules ? "Advanced" : "Standard")} {(_state.ShowAdvancedRules && _state.UseUltraRule1 ? " U1" : "")} " +
                $"{(_state.ShowAdvancedRules && _state.UseUltraRule2 ? " U2" : "")} {(_state.ShowAdvancedRules && _state.UseUltraRule3 ? " U3" : "")}";
    }

    private void RefreshLobbyDetails(TestLobby tb)
    {
        _bd.ImgSrc = tb.ImageFileName;
        _bd.ImgName = tb.Name;
        _bd.HideImage = false;
        _bd.Foes = tb.Foes.ToList();
        _bd.LoadLobby();

        getCurrentSettings();
    }
}

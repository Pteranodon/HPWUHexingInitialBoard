@page "/test"
@page "/test/{Id:int}"

@using HPWUHexingTrainer.Shared
@using HPWUHexingTrainer.Classes
@using Newtonsoft.Json
@inject IJSRuntime js

<h3>Test yourself with some lobbies from the training sessions</h3>

<div class="row pt-2">
    <div class="col">
        <button class="btn btn-outline-primary" @onclick="GetNewLobby">New Lobby</button>

        <label class="pl-1" for="chkRandom">Random order?</label>
        <input id="chkRandom" type="checkbox" @bind="@randomTests" />
        <label class=" h4 pt-2 pl-2">@_imgName</label>
        <label class=" pt-2 pl-2">@_methodUsed</label>
    </div>
</div>
<div class="row pt-2">
    <div class="col">
        @*Uncomment the line below to generate csv file output for each of the 720 unique boards*@
        @*<button class="btn btn-outline-primary" @onclick="CalculateAllLobbies">CalculateAllLobbies</button>*@
    </div>
</div>



<div class="row pt-2">
    <div class="col">
        <LobbyDetails @ref="_bd"></LobbyDetails>
    </div>
</div>


@code {

    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    public UserSettings _state { get; set; }


    private LobbyDetails _bd = new LobbyDetails();
    private List<Foe> _foes = new List<Foe>();
    private bool randomTests = false;
    private int testListElement = -1;
    private string _imgName;
    private List<TestLobby> _testLobbies;
    private string _methodUsed;

    private IJSObjectReference _jsModule;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        //_jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/file.js");

        getCurrentSettings();

        Id = Id ?? -1;

        if (Id.Value >= 0)
        {
            LoadAllLobbies();
            LoadLobby(_testLobbies[Id.Value]);
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (Id != null && Id.Value >= 0)
        {
            RefreshLobbyDetails(_testLobbies[Id.Value]); // this needs to wait until rendering complete
            testListElement = Id.Value;
            Id = -1;
        }
    }


    public void GetNewLobby()
    {
        LoadAllLobbies();

        if (randomTests)
        {
            Random rnd = new Random();
            testListElement = rnd.Next(0, _testLobbies.Count);
        }
        else
        {
            testListElement++;

            // if we are past the end of the list, go to the start again
            if (testListElement == _testLobbies.Count)
                testListElement = 0;
        }

        LoadLobby(_testLobbies[testListElement]);
        RefreshLobbyDetails(_testLobbies[testListElement]);
    }

    private void LoadAllLobbies()
    {
        if (_testLobbies == null || _testLobbies.Count == 0)
        {
            _testLobbies = GenerateTestLobbies.Create();

            // Make all lobbies have 5 foes
            Random rnd = new Random();
            foreach (var lobby in _testLobbies)
            {
                // if we don't have 5 foes, pad with random elites
                while (lobby.Foes.Count < 5)
                {
                    Foe foe = new Foe();
                    foe.Elite = true;

                    foe.Stars = (StarName)rnd.Next(3, 6);
                    foe.Type = (FoeType)rnd.Next(1, 7);

                    lobby.Foes.Add(foe);
                }
            }
        }
    }

    private void LoadLobby(TestLobby tb)
    {
        _foes.Clear();
        _bd.Clear();

        if (tb is null)
            return;

        _imgName = tb.Name ?? "Lobby X";

        if (tb.Foes != null)
            _foes = tb.Foes.ToList();

    }

    private void getCurrentSettings()
    {
        _methodUsed = $"{(_state.ShowAdvancedRules ? "Advanced" : "Standard")}{(_state.ShowAdvancedRules && _state.UseUltraRule1 ? " U1" : "")}" +
                $"{(_state.ShowAdvancedRules && _state.UseUltraRule2 ? " U2" : "")}{(_state.ShowAdvancedRules && _state.UseUltraRule3 ? " U3" : "")}";
    }

    private void RefreshLobbyDetails(TestLobby tb)
    {
        _bd.ImgSrc = tb.ImageFileName;
        _bd.ImgName = tb.Name;
        _bd.HideImage = false;
        _bd.Foes = tb.Foes.ToList();
        _bd.LoadLobby();

        getCurrentSettings();
    }

    private void CalculateAllLobbies()
    {
        LoadAllLobbies();
        List<LobbyResultLite> results = new List<LobbyResultLite>();

        // add header row
        string csv = $"id, focuspassed, focuskept, shields, proficiency{Environment.NewLine}";

        for (int i = 0; i < _testLobbies.Count; i++)
        //for (int i = 0; i < 3; i++)
        {
            Console.WriteLine($"Reading {i} ");
            testListElement = i;
            LoadLobby(_testLobbies[testListElement]);

            LobbyResult lr = new LobbyReader(_foes, _state).Read();

            int passed = lr.A1FocusPassed + lr.A2FocusPassed;
            int kept = lr.A1FocusKept + lr.A2FocusKept;
            int shields = Convert.ToInt32(lr.P1ShieldsA2) + Convert.ToInt32(lr.P1ShieldsP2) + Convert.ToInt32(lr.P2ShieldsA2);

            results.Add(new LobbyResultLite(i, passed, kept, shields, lr.Proficiency));

            csv += $"{i}, {passed}, {kept}, {shields}, {lr.Proficiency}{Environment.NewLine}";
        }

        var bytes = System.Text.Encoding.UTF8.GetBytes(csv);
        DownloadBinaryOptim(bytes);
    }

    async Task DownloadText(byte[] bytes)
    {
        string fileName = $"results { _methodUsed }.csv";
        await js.InvokeVoidAsync("BlazorDownloadFile", fileName, "text/plain", bytes);
    }


    async void DownloadBinaryOptim(byte[] bytes)
    {
        string fileName = $"results { _methodUsed }.csv";
        string contentType = "text/plain";

        // Check if the IJSRuntime is the WebAssembly implementation of the JSRuntime
        if (js is IJSUnmarshalledRuntime webAssemblyJSRuntime)
        {
            var reference = DotNetObjectReference.Create(this);
            webAssemblyJSRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", fileName, contentType, bytes);
        }
        else
        {
            // Fall back to the slow method if not in WebAssembly
            await _jsModule.InvokeVoidAsync("BlazorDownloadFile", fileName, contentType, bytes);
        }
    }
}
